-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eth_fifo_interface is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    dma_tx_end_tog_V : IN STD_LOGIC_VECTOR (0 downto 0);
    tx_r_fixed_lat_V : IN STD_LOGIC_VECTOR (0 downto 0);
    tx_r_rd_V : IN STD_LOGIC_VECTOR (0 downto 0);
    tx_r_status_V : IN STD_LOGIC_VECTOR (3 downto 0);
    data_in_V_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    data_in_V_V_TVALID : IN STD_LOGIC;
    data_in_V_V_TREADY : OUT STD_LOGIC;
    dma_tx_status_tog_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    tx_r_control_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    tx_r_data_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    tx_r_data_rdy_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    tx_r_eop_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    tx_r_err_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    tx_r_flushed_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    tx_r_sop_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    tx_r_underflow_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    tx_r_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of eth_fifo_interface is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "eth_fifo_interface,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=3.333333,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.607000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=453,HLS_SYN_LUT=1585,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_3E80 : STD_LOGIC_VECTOR (13 downto 0) := "11111010000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv14_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv16_5D1 : STD_LOGIC_VECTOR (15 downto 0) := "0000010111010001";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv14_5CF : STD_LOGIC_VECTOR (13 downto 0) := "00010111001111";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_35 : STD_LOGIC_VECTOR (7 downto 0) := "00110101";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_59 : STD_LOGIC_VECTOR (7 downto 0) := "01011001";
    constant ap_const_lv8_F5 : STD_LOGIC_VECTOR (7 downto 0) := "11110101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv14_30 : STD_LOGIC_VECTOR (13 downto 0) := "00000000110000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_31 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal last_tx_status_valid : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal buffer_count_V : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal data_ready_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tx_valid_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal sop_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal eop_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tx_data_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal current_state : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal length_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal count_V : STD_LOGIC_VECTOR (13 downto 0) := "11111010000000";
    signal buffer_added : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal buffer_data_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ID_num_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal data_word_valid : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal word_byte_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal data_word_V : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal data_in_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal brmerge8_fu_1357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_709_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_storemerge1_phi_fu_420_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal data_buffer_V_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal data_buffer_V_V_empty_n : STD_LOGIC;
    signal data_buffer_V_V_read : STD_LOGIC;
    signal current_state_load_load_fu_798_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tx_r_rd_V_read_read_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_nbreadreq_fu_307_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op95_read_state1 : BOOLEAN;
    signal ap_predicate_op110_read_state1 : BOOLEAN;
    signal data_buffer_V_V_full_n : STD_LOGIC;
    signal data_buffer_V_V_write : STD_LOGIC;
    signal brmerge1016_demorgan_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_phi_mux_storemerge2_phi_fu_430_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_sop_V_new_1_phi_fu_440_p26 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_eop_V_new_phi_fu_483_p26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_buffer_removed_5_phi_fu_527_p26 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_data_V_15_fu_1153_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_tmp_V_3_phi_fu_571_p34 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_byte_V_load_load_fu_1145_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_data_V_14_fu_1164_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_13_fu_1175_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_12_fu_1186_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_11_fu_1197_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_10_fu_1208_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_9_fu_1219_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_8_fu_1230_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_7_fu_1241_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_6_fu_1252_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_5_fu_1263_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_4_fu_1274_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_3_fu_1285_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_2_fu_1296_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_1_fu_1307_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_V_fu_1318_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_buffer_added_new_phi_fu_612_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_data_word_valid_flag_phi_fu_623_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_1329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_word_byte_V_flag_phi_fu_633_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_fu_1343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_1336_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_data_word_valid_load_1_phi_fu_653_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_data_word_valid_flag_1_phi_fu_662_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_data_word_valid_new_1_phi_fu_673_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_word_byte_V_flag_1_phi_fu_684_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_word_byte_V_new_1_phi_fu_695_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_fu_1399_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal brmerge1_fu_1381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_1423_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal brmerge2_fu_1417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_in_in_fu_891_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_943_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_995_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal packet_buffered_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal demorgan_fu_1054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_fu_1106_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_909_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal buffer_added_load_load_fu_811_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_841_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_877_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_887_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_905_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_22_fu_933_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_943_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_985_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_995_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_6_fu_1019_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal demorgan_fu_1054_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_1060_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_2_fu_1070_p5 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_cast_fu_1088_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_fu_1082_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_1092_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_s_fu_1098_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal brmerge1016_demorgan_fu_1127_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_not_fu_1351_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_not_fu_1351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not1_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_removed_5_not_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_733 : BOOLEAN;
    signal ap_condition_736 : BOOLEAN;
    signal ap_condition_109 : BOOLEAN;
    signal ap_condition_193 : BOOLEAN;

    component eth_fifo_interfacbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fifo_w8_d16384_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    eth_fifo_interfacbkb_U1 : component eth_fifo_interfacbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_A,
        din2 => ap_const_lv8_35,
        din3 => ap_const_lv8_3,
        din4 => ap_const_lv8_59,
        din5 => ap_const_lv8_F5,
        din6 => tmp_4_fu_943_p7,
        dout => tmp_4_fu_943_p8);

    eth_fifo_interfacbkb_U2 : component eth_fifo_interfacbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_FF,
        din1 => ap_const_lv8_FF,
        din2 => ap_const_lv8_FF,
        din3 => ap_const_lv8_FF,
        din4 => ap_const_lv8_FF,
        din5 => ap_const_lv8_FF,
        din6 => tmp_3_fu_995_p7,
        dout => tmp_3_fu_995_p8);

    data_buffer_V_V_fifo_U : component fifo_w8_d16384_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ap_phi_mux_tmp_V_3_phi_fu_571_p34,
        if_full_n => data_buffer_V_V_full_n,
        if_write => data_buffer_V_V_write,
        if_dout => data_buffer_V_V_dout,
        if_empty_n => data_buffer_V_V_empty_n,
        if_read => data_buffer_V_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer_count_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_109)) then
                if (((brmerge1_fu_1381_p2 = ap_const_lv1_1) and (brmerge2_fu_1417_p2 = ap_const_lv1_0))) then 
                    buffer_count_V <= tmp_21_fu_1423_p2;
                elsif ((brmerge1_fu_1381_p2 = ap_const_lv1_0)) then 
                    buffer_count_V <= tmp_20_fu_1399_p2;
                end if;
            end if; 
        end if;
    end process;

    count_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (packet_buffered_fu_761_p2 = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (demorgan_fu_1054_p2 = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_0) and (packet_buffered_fu_761_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                count_V <= ap_const_lv14_6;
            elsif ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tx_r_rd_V = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                count_V <= ap_phi_mux_storemerge2_phi_fu_430_p4;
            elsif ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tx_r_rd_V = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                count_V <= ap_phi_mux_storemerge1_phi_fu_420_p4;
            elsif ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (ap_predicate_op110_read_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                count_V <= tmp_14_fu_909_p2;
            elsif (((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_3) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tx_r_rd_V = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_5) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (current_state_load_load_fu_798_p1 = ap_const_lv3_0) and (p_not_fu_1048_p2 = ap_const_lv1_0) and (buffer_added_load_load_fu_811_p1 = ap_const_lv1_0) and (demorgan_fu_1054_p2 = ap_const_lv1_0) and (packet_buffered_fu_761_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                count_V <= grp_fu_709_p2;
            elsif (((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tx_r_rd_V = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (buffer_added_load_load_fu_811_p1 = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_0) and (demorgan_fu_1054_p2 = ap_const_lv1_0) and (packet_buffered_fu_761_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                count_V <= ap_const_lv14_3E80;
            end if; 
        end if;
    end process;

    current_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (packet_buffered_fu_761_p2 = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (demorgan_fu_1054_p2 = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_0) and (packet_buffered_fu_761_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                current_state <= ap_const_lv3_1;
            elsif ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tmp_2_fu_819_p2 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                current_state <= ap_const_lv3_2;
            elsif ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tmp_2_fu_819_p2 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                current_state <= ap_const_lv3_3;
            elsif ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (ap_predicate_op110_read_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                current_state <= ap_const_lv3_4;
            elsif ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (tmp_nbreadreq_fu_307_p3 = ap_const_lv1_0) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                current_state <= ap_const_lv3_5;
            elsif (((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tmp_2_fu_819_p2 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tmp_2_fu_819_p2 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                current_state <= ap_const_lv3_6;
            elsif ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tx_r_rd_V = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                current_state <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    data_ready_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_109)) then
                if ((current_state_load_load_fu_798_p1 = ap_const_lv3_1)) then 
                    data_ready_V <= ap_const_lv1_1;
                elsif ((current_state_load_load_fu_798_p1 = ap_const_lv3_2)) then 
                    data_ready_V <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    length_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_193)) then
                if ((packet_buffered_fu_761_p2 = ap_const_lv1_1)) then 
                    length_V(0) <= '1';
                    length_V(1) <= '0';
                    length_V(2) <= '0';
                    length_V(3) <= '0';
                    length_V(4) <= '1';
                    length_V(5) <= '0';
                    length_V(6) <= '1';
                    length_V(7) <= '1';
                    length_V(8) <= '1';
                    length_V(9) <= '0';
                    length_V(10) <= '1';
                    length_V(11) <= '0';
                    length_V(12) <= '0';
                    length_V(13) <= '0';
                    length_V(14) <= '0';
                elsif (((demorgan_fu_1054_p2 = ap_const_lv1_1) and (packet_buffered_fu_761_p2 = ap_const_lv1_0))) then 
                                        length_V(14 downto 0) <= p_cast_fu_1106_p1(14 downto 0);
                end if;
            end if; 
        end if;
    end process;

    tx_data_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_109)) then
                if ((current_state_load_load_fu_798_p1 = ap_const_lv3_1)) then 
                    tx_data_V <= tmp_3_fu_995_p8;
                elsif ((current_state_load_load_fu_798_p1 = ap_const_lv3_2)) then 
                    tx_data_V <= tmp_4_fu_943_p8;
                elsif ((current_state = ap_const_lv3_3)) then 
                    tx_data_V <= storemerge_in_in_fu_891_p3;
                elsif ((current_state = ap_const_lv3_4)) then 
                    tx_data_V <= buffer_data_V;
                elsif ((current_state_load_load_fu_798_p1 = ap_const_lv3_5)) then 
                    tx_data_V <= ap_const_lv8_0;
                elsif ((current_state_load_load_fu_798_p1 = ap_const_lv3_6)) then 
                    tx_data_V <= ID_num_V;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (tx_r_rd_V = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ID_num_V <= tmp_8_fu_841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                buffer_added <= ap_phi_mux_buffer_added_new_phi_fu_612_p4;
                eop_V <= ap_phi_mux_eop_V_new_phi_fu_483_p26;
                last_tx_status_valid <= dma_tx_end_tog_V;
                sop_V <= ap_phi_mux_sop_V_new_1_phi_fu_440_p26;
                tx_valid_V <= tx_r_rd_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (ap_predicate_op110_read_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (ap_predicate_op95_read_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then
                buffer_data_V <= data_buffer_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (brmerge8_fu_1357_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                data_word_V <= data_in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (ap_phi_mux_data_word_valid_flag_1_phi_fu_662_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                data_word_valid <= ap_phi_mux_data_word_valid_new_1_phi_fu_673_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (ap_phi_mux_word_byte_V_flag_1_phi_fu_684_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                word_byte_V <= ap_phi_mux_word_byte_V_new_1_phi_fu_695_p4;
            end if;
        end if;
    end process;
    length_V(15) <= '0';

    ap_NS_fsm_assign_proc : process (data_in_V_V_TVALID, ap_CS_fsm, ap_CS_fsm_state1, brmerge8_fu_1357_p2, data_buffer_V_V_empty_n, ap_predicate_op95_read_state1, ap_predicate_op110_read_state1, data_buffer_V_V_full_n, brmerge1016_demorgan_fu_1127_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(data_in_V_V_TVALID, brmerge8_fu_1357_p2, data_buffer_V_V_empty_n, ap_predicate_op95_read_state1, ap_predicate_op110_read_state1, data_buffer_V_V_full_n, brmerge1016_demorgan_fu_1127_p2)
    begin
                ap_block_state1 <= (((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)));
    end process;


    ap_condition_109_assign_proc : process(data_in_V_V_TVALID, ap_CS_fsm_state1, brmerge8_fu_1357_p2, data_buffer_V_V_empty_n, ap_predicate_op95_read_state1, ap_predicate_op110_read_state1, data_buffer_V_V_full_n, brmerge1016_demorgan_fu_1127_p2)
    begin
                ap_condition_109 <= (not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_193_assign_proc : process(data_in_V_V_TVALID, ap_CS_fsm_state1, brmerge8_fu_1357_p2, data_buffer_V_V_empty_n, current_state_load_load_fu_798_p1, ap_predicate_op95_read_state1, ap_predicate_op110_read_state1, data_buffer_V_V_full_n, brmerge1016_demorgan_fu_1127_p2)
    begin
                ap_condition_193 <= (not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (current_state_load_load_fu_798_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_733_assign_proc : process(tx_r_rd_V, ap_CS_fsm_state1, current_state_load_load_fu_798_p1)
    begin
                ap_condition_733 <= ((tx_r_rd_V = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_736_assign_proc : process(tx_r_rd_V, ap_CS_fsm_state1, current_state_load_load_fu_798_p1)
    begin
                ap_condition_736 <= ((tx_r_rd_V = ap_const_lv1_1) and (current_state_load_load_fu_798_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_phi_mux_buffer_added_new_phi_fu_612_p4_assign_proc : process(ap_CS_fsm_state1, brmerge1016_demorgan_fu_1127_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_buffer_added_new_phi_fu_612_p4 <= ap_const_lv1_1;
            elsif ((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_buffer_added_new_phi_fu_612_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_buffer_added_new_phi_fu_612_p4 <= "X";
            end if;
        else 
            ap_phi_mux_buffer_added_new_phi_fu_612_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_buffer_removed_5_phi_fu_527_p26_assign_proc : process(tx_r_rd_V, current_state, ap_CS_fsm_state1, current_state_load_load_fu_798_p1, tx_r_rd_V_read_read_fu_288_p2, tmp_2_fu_819_p2, tmp_nbreadreq_fu_307_p3)
    begin
        if ((((tmp_2_fu_819_p2 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_nbreadreq_fu_307_p3 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_buffer_removed_5_phi_fu_527_p26 <= ap_const_lv1_1;
        elsif ((((current_state = ap_const_lv3_3) and (tx_r_rd_V_read_read_fu_288_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_3) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_2_fu_819_p2 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (tmp_nbreadreq_fu_307_p3 = ap_const_lv1_0) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state = ap_const_lv3_4) and (tx_r_rd_V_read_read_fu_288_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_buffer_removed_5_phi_fu_527_p26 <= ap_const_lv1_0;
        else 
            ap_phi_mux_buffer_removed_5_phi_fu_527_p26 <= "X";
        end if; 
    end process;


    ap_phi_mux_data_word_valid_flag_1_phi_fu_662_p4_assign_proc : process(ap_CS_fsm_state1, brmerge8_fu_1357_p2, ap_phi_mux_data_word_valid_flag_phi_fu_623_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((brmerge8_fu_1357_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_data_word_valid_flag_1_phi_fu_662_p4 <= ap_const_lv1_1;
            elsif ((brmerge8_fu_1357_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_data_word_valid_flag_1_phi_fu_662_p4 <= ap_phi_mux_data_word_valid_flag_phi_fu_623_p4;
            else 
                ap_phi_mux_data_word_valid_flag_1_phi_fu_662_p4 <= "X";
            end if;
        else 
            ap_phi_mux_data_word_valid_flag_1_phi_fu_662_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_data_word_valid_flag_phi_fu_623_p4_assign_proc : process(ap_CS_fsm_state1, brmerge1016_demorgan_fu_1127_p2, tmp_17_fu_1329_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_data_word_valid_flag_phi_fu_623_p4 <= tmp_17_fu_1329_p2;
            elsif ((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_data_word_valid_flag_phi_fu_623_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_data_word_valid_flag_phi_fu_623_p4 <= "X";
            end if;
        else 
            ap_phi_mux_data_word_valid_flag_phi_fu_623_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_data_word_valid_load_1_phi_fu_653_p4_assign_proc : process(data_word_valid, ap_CS_fsm_state1, brmerge1016_demorgan_fu_1127_p2, not_tmp_s_fu_1343_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_data_word_valid_load_1_phi_fu_653_p4 <= not_tmp_s_fu_1343_p2;
            elsif ((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_data_word_valid_load_1_phi_fu_653_p4 <= data_word_valid;
            else 
                ap_phi_mux_data_word_valid_load_1_phi_fu_653_p4 <= "X";
            end if;
        else 
            ap_phi_mux_data_word_valid_load_1_phi_fu_653_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_data_word_valid_new_1_phi_fu_673_p4_assign_proc : process(ap_CS_fsm_state1, brmerge8_fu_1357_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((brmerge8_fu_1357_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_data_word_valid_new_1_phi_fu_673_p4 <= ap_const_lv1_1;
            elsif ((brmerge8_fu_1357_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_data_word_valid_new_1_phi_fu_673_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_data_word_valid_new_1_phi_fu_673_p4 <= "X";
            end if;
        else 
            ap_phi_mux_data_word_valid_new_1_phi_fu_673_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_eop_V_new_phi_fu_483_p26_assign_proc : process(tx_r_rd_V, current_state, ap_CS_fsm_state1, current_state_load_load_fu_798_p1, tx_r_rd_V_read_read_fu_288_p2, tmp_2_fu_819_p2, tmp_nbreadreq_fu_307_p3)
    begin
        if (((current_state_load_load_fu_798_p1 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_eop_V_new_phi_fu_483_p26 <= ap_const_lv1_1;
        elsif ((((current_state = ap_const_lv3_3) and (tx_r_rd_V_read_read_fu_288_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_2_fu_819_p2 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_3) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_2_fu_819_p2 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_nbreadreq_fu_307_p3 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (tmp_nbreadreq_fu_307_p3 = ap_const_lv1_0) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state = ap_const_lv3_4) and (tx_r_rd_V_read_read_fu_288_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_eop_V_new_phi_fu_483_p26 <= ap_const_lv1_0;
        else 
            ap_phi_mux_eop_V_new_phi_fu_483_p26 <= "X";
        end if; 
    end process;


    ap_phi_mux_sop_V_new_1_phi_fu_440_p26_assign_proc : process(tx_r_rd_V, current_state, ap_CS_fsm_state1, current_state_load_load_fu_798_p1, tx_r_rd_V_read_read_fu_288_p2, tmp_2_fu_819_p2, tmp_nbreadreq_fu_307_p3, tmp_6_fu_1029_p2)
    begin
        if (((current_state_load_load_fu_798_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_sop_V_new_1_phi_fu_440_p26 <= tmp_6_fu_1029_p2;
        elsif ((((current_state = ap_const_lv3_3) and (tx_r_rd_V_read_read_fu_288_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_2_fu_819_p2 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_3) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_2_fu_819_p2 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_nbreadreq_fu_307_p3 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (tmp_nbreadreq_fu_307_p3 = ap_const_lv1_0) and (tmp_2_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state = ap_const_lv3_4) and (tx_r_rd_V_read_read_fu_288_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((current_state_load_load_fu_798_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_sop_V_new_1_phi_fu_440_p26 <= ap_const_lv1_0;
        else 
            ap_phi_mux_sop_V_new_1_phi_fu_440_p26 <= "X";
        end if; 
    end process;


    ap_phi_mux_storemerge1_phi_fu_420_p4_assign_proc : process(grp_fu_709_p2, tmp_2_fu_819_p2, ap_condition_733)
    begin
        if ((ap_const_boolean_1 = ap_condition_733)) then
            if ((tmp_2_fu_819_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge1_phi_fu_420_p4 <= ap_const_lv14_2;
            elsif ((tmp_2_fu_819_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge1_phi_fu_420_p4 <= grp_fu_709_p2;
            else 
                ap_phi_mux_storemerge1_phi_fu_420_p4 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge1_phi_fu_420_p4 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_storemerge2_phi_fu_430_p4_assign_proc : process(grp_fu_709_p2, tmp_2_fu_819_p2, ap_condition_736)
    begin
        if ((ap_const_boolean_1 = ap_condition_736)) then
            if ((tmp_2_fu_819_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge2_phi_fu_430_p4 <= ap_const_lv14_6;
            elsif ((tmp_2_fu_819_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge2_phi_fu_430_p4 <= grp_fu_709_p2;
            else 
                ap_phi_mux_storemerge2_phi_fu_430_p4 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge2_phi_fu_430_p4 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_tmp_V_3_phi_fu_571_p34_assign_proc : process(ap_CS_fsm_state1, brmerge1016_demorgan_fu_1127_p2, temp_data_V_15_fu_1153_p4, word_byte_V_load_load_fu_1145_p1, temp_data_V_14_fu_1164_p4, temp_data_V_13_fu_1175_p4, temp_data_V_12_fu_1186_p4, temp_data_V_11_fu_1197_p4, temp_data_V_10_fu_1208_p4, temp_data_V_9_fu_1219_p4, temp_data_V_8_fu_1230_p4, temp_data_V_7_fu_1241_p4, temp_data_V_6_fu_1252_p4, temp_data_V_5_fu_1263_p4, temp_data_V_4_fu_1274_p4, temp_data_V_3_fu_1285_p4, temp_data_V_2_fu_1296_p4, temp_data_V_1_fu_1307_p4, temp_data_V_fu_1318_p4)
    begin
        if (((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_0)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_fu_1318_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_1)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_1_fu_1307_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_2)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_2_fu_1296_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_3)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_3_fu_1285_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_4)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_4_fu_1274_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_5)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_5_fu_1263_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_6)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_6_fu_1252_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_7)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_7_fu_1241_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_8)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_8_fu_1230_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_9)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_9_fu_1219_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_A)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_10_fu_1208_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_B)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_11_fu_1197_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_C)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_12_fu_1186_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_D)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_13_fu_1175_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_E)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_14_fu_1164_p4;
            elsif ((word_byte_V_load_load_fu_1145_p1 = ap_const_lv4_F)) then 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= temp_data_V_15_fu_1153_p4;
            else 
                ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_tmp_V_3_phi_fu_571_p34 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_word_byte_V_flag_1_phi_fu_684_p4_assign_proc : process(ap_CS_fsm_state1, brmerge8_fu_1357_p2, ap_phi_mux_word_byte_V_flag_phi_fu_633_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((brmerge8_fu_1357_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_word_byte_V_flag_1_phi_fu_684_p4 <= ap_const_lv1_1;
            elsif ((brmerge8_fu_1357_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_word_byte_V_flag_1_phi_fu_684_p4 <= ap_phi_mux_word_byte_V_flag_phi_fu_633_p4;
            else 
                ap_phi_mux_word_byte_V_flag_1_phi_fu_684_p4 <= "X";
            end if;
        else 
            ap_phi_mux_word_byte_V_flag_1_phi_fu_684_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_word_byte_V_flag_phi_fu_633_p4_assign_proc : process(ap_CS_fsm_state1, brmerge1016_demorgan_fu_1127_p2, not_tmp_s_fu_1343_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_word_byte_V_flag_phi_fu_633_p4 <= not_tmp_s_fu_1343_p2;
            elsif ((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_word_byte_V_flag_phi_fu_633_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_word_byte_V_flag_phi_fu_633_p4 <= "X";
            end if;
        else 
            ap_phi_mux_word_byte_V_flag_phi_fu_633_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_word_byte_V_new_1_phi_fu_695_p4_assign_proc : process(ap_CS_fsm_state1, brmerge8_fu_1357_p2, tmp_18_fu_1336_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((brmerge8_fu_1357_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_word_byte_V_new_1_phi_fu_695_p4 <= ap_const_lv4_0;
            elsif ((brmerge8_fu_1357_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_word_byte_V_new_1_phi_fu_695_p4 <= tmp_18_fu_1336_p2;
            else 
                ap_phi_mux_word_byte_V_new_1_phi_fu_695_p4 <= "XXXX";
            end if;
        else 
            ap_phi_mux_word_byte_V_new_1_phi_fu_695_p4 <= "XXXX";
        end if; 
    end process;


    ap_predicate_op110_read_state1_assign_proc : process(tx_r_rd_V, current_state, tmp_2_fu_819_p2)
    begin
                ap_predicate_op110_read_state1 <= ((tmp_2_fu_819_p2 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_3));
    end process;


    ap_predicate_op95_read_state1_assign_proc : process(tx_r_rd_V, current_state, tmp_2_fu_819_p2, tmp_nbreadreq_fu_307_p3)
    begin
                ap_predicate_op95_read_state1 <= ((tmp_nbreadreq_fu_307_p3 = ap_const_lv1_1) and (tx_r_rd_V = ap_const_lv1_1) and (current_state = ap_const_lv3_4) and (tmp_2_fu_819_p2 = ap_const_lv1_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    brmerge1016_demorgan_fu_1127_p1 <= (0=>data_buffer_V_V_full_n, others=>'-');
    brmerge1016_demorgan_fu_1127_p2 <= (data_word_valid and brmerge1016_demorgan_fu_1127_p1);
    brmerge1_fu_1381_p2 <= (p_not1_fu_1375_p2 or ap_phi_mux_buffer_removed_5_phi_fu_527_p26);
    brmerge2_fu_1417_p2 <= (buffer_removed_5_not_fu_1411_p2 or ap_phi_mux_buffer_added_new_phi_fu_612_p4);
    brmerge8_fu_1357_p2 <= (tmp_27_not_fu_1351_p2 or ap_phi_mux_data_word_valid_load_1_phi_fu_653_p4);
    buffer_added_load_load_fu_811_p1 <= buffer_added;
    buffer_removed_5_not_fu_1411_p2 <= (ap_phi_mux_buffer_removed_5_phi_fu_527_p26 xor ap_const_lv1_1);
    current_state_load_load_fu_798_p1 <= current_state;

    data_buffer_V_V_read_assign_proc : process(data_in_V_V_TVALID, ap_CS_fsm_state1, brmerge8_fu_1357_p2, data_buffer_V_V_empty_n, ap_predicate_op95_read_state1, ap_predicate_op110_read_state1, data_buffer_V_V_full_n, brmerge1016_demorgan_fu_1127_p2)
    begin
        if (((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (ap_predicate_op110_read_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (ap_predicate_op95_read_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            data_buffer_V_V_read <= ap_const_logic_1;
        else 
            data_buffer_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_buffer_V_V_write_assign_proc : process(data_in_V_V_TVALID, ap_CS_fsm_state1, brmerge8_fu_1357_p2, data_buffer_V_V_empty_n, ap_predicate_op95_read_state1, ap_predicate_op110_read_state1, data_buffer_V_V_full_n, brmerge1016_demorgan_fu_1127_p2)
    begin
        if ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_buffer_V_V_write <= ap_const_logic_1;
        else 
            data_buffer_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    data_in_V_V_TDATA_blk_n_assign_proc : process(data_in_V_V_TVALID, ap_CS_fsm_state1, brmerge8_fu_1357_p2)
    begin
        if (((brmerge8_fu_1357_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_in_V_V_TDATA_blk_n <= data_in_V_V_TVALID;
        else 
            data_in_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_V_V_TREADY_assign_proc : process(data_in_V_V_TVALID, ap_CS_fsm_state1, brmerge8_fu_1357_p2, data_buffer_V_V_empty_n, ap_predicate_op95_read_state1, ap_predicate_op110_read_state1, data_buffer_V_V_full_n, brmerge1016_demorgan_fu_1127_p2)
    begin
        if ((not((((brmerge1016_demorgan_fu_1127_p2 = ap_const_lv1_1) and (data_buffer_V_V_full_n = ap_const_logic_0)) or ((ap_predicate_op110_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op95_read_state1 = ap_const_boolean_1) and (data_buffer_V_V_empty_n = ap_const_logic_0)) or ((data_in_V_V_TVALID = ap_const_logic_0) and (brmerge8_fu_1357_p2 = ap_const_lv1_0)))) and (brmerge8_fu_1357_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_in_V_V_TREADY <= ap_const_logic_1;
        else 
            data_in_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    demorgan_fu_1054_p0 <= (0=>data_buffer_V_V_empty_n, others=>'-');
    demorgan_fu_1054_p2 <= (p_not_fu_1048_p2 and demorgan_fu_1054_p0);
    dma_tx_status_tog_V <= last_tx_status_valid;
    grp_fu_709_p2 <= std_logic_vector(unsigned(count_V) + unsigned(ap_const_lv14_3FFF));
    not_tmp_s_fu_1343_p2 <= (tmp_17_fu_1329_p2 xor ap_const_lv1_1);
    
    p_Result_2_fu_1070_p5_proc : process(p_Result_s_fu_1060_p4)
    begin
        for i in 14 - 1 downto 0 loop
            if (i > 13 or i < 4) then
                p_Result_2_fu_1070_p5(i) <= ap_const_lv14_0(i);
            elsif (13 - i >= 10) then
                p_Result_2_fu_1070_p5(i) <= '0';
            else
                p_Result_2_fu_1070_p5(i) <= p_Result_s_fu_1060_p4(13 - i);
            end if;
        end loop;
    end process;

    
    p_Result_6_fu_1019_p4_proc : process(count_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_6_fu_1019_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_3(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := count_V;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_3(4-1 downto 0)));
            for p_Result_6_fu_1019_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_6_fu_1019_p4_i) := count_V(14-1-p_Result_6_fu_1019_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_6_fu_1019_p4 <= resvalue(4-1 downto 0);
    end process;

    p_Result_7_fu_877_p4 <= length_V(15 downto 8);
    
    p_Result_s_fu_1060_p4_proc : process(buffer_count_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_s_fu_1060_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_4(4 - 1 downto 0);
        v0_cpy := buffer_count_V;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_4(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_s_fu_1060_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_s_fu_1060_p4_i) := buffer_count_V(14-1-p_Result_s_fu_1060_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_1060_p4 <= resvalue(10-1 downto 0);
    end process;

    p_cast_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_fu_1098_p3),16));
    p_not1_fu_1375_p2 <= (ap_phi_mux_buffer_added_new_phi_fu_612_p4 xor ap_const_lv1_1);
    p_not_fu_1048_p2 <= "1" when (count_V = ap_const_lv14_0) else "0";
    p_s_fu_1098_p3 <= 
        ap_const_lv15_31 when (tmp_9_fu_1082_p2(0) = '1') else 
        tmp_5_fu_1092_p2;
    packet_buffered_fu_761_p2 <= "1" when (unsigned(buffer_count_V) > unsigned(ap_const_lv14_5CF)) else "0";
    storemerge_in_in_fu_891_p3 <= 
        p_Result_7_fu_877_p4 when (tmp_s_fu_871_p2(0) = '1') else 
        tmp_23_fu_887_p1;
    
    temp_data_V_10_fu_1208_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_10_fu_1208_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_57(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_50(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_50(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_57(7-1 downto 0)));
            for temp_data_V_10_fu_1208_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_10_fu_1208_p4_i) := data_word_V(128-1-temp_data_V_10_fu_1208_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_10_fu_1208_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_11_fu_1197_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_11_fu_1197_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_58(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_58(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_5F(7-1 downto 0)));
            for temp_data_V_11_fu_1197_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_11_fu_1197_p4_i) := data_word_V(128-1-temp_data_V_11_fu_1197_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_11_fu_1197_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_12_fu_1186_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_12_fu_1186_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_67(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_60(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_60(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_67(7-1 downto 0)));
            for temp_data_V_12_fu_1186_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_12_fu_1186_p4_i) := data_word_V(128-1-temp_data_V_12_fu_1186_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_12_fu_1186_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_13_fu_1175_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_13_fu_1175_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_6F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_68(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_68(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_6F(7-1 downto 0)));
            for temp_data_V_13_fu_1175_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_13_fu_1175_p4_i) := data_word_V(128-1-temp_data_V_13_fu_1175_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_13_fu_1175_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_14_fu_1164_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_14_fu_1164_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_77(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_70(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_70(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_77(7-1 downto 0)));
            for temp_data_V_14_fu_1164_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_14_fu_1164_p4_i) := data_word_V(128-1-temp_data_V_14_fu_1164_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_14_fu_1164_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_15_fu_1153_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_15_fu_1153_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_78(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_78(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for temp_data_V_15_fu_1153_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_15_fu_1153_p4_i) := data_word_V(128-1-temp_data_V_15_fu_1153_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_15_fu_1153_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_1_fu_1307_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_1_fu_1307_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_8(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_8(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_F(7-1 downto 0)));
            for temp_data_V_1_fu_1307_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_1_fu_1307_p4_i) := data_word_V(128-1-temp_data_V_1_fu_1307_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_1_fu_1307_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_2_fu_1296_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_2_fu_1296_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_17(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_10(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_10(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_17(7-1 downto 0)));
            for temp_data_V_2_fu_1296_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_2_fu_1296_p4_i) := data_word_V(128-1-temp_data_V_2_fu_1296_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_2_fu_1296_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_3_fu_1285_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_3_fu_1285_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_1F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_18(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_18(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_1F(7-1 downto 0)));
            for temp_data_V_3_fu_1285_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_3_fu_1285_p4_i) := data_word_V(128-1-temp_data_V_3_fu_1285_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_3_fu_1285_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_4_fu_1274_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_4_fu_1274_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_27(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_20(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_20(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_27(7-1 downto 0)));
            for temp_data_V_4_fu_1274_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_4_fu_1274_p4_i) := data_word_V(128-1-temp_data_V_4_fu_1274_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_4_fu_1274_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_5_fu_1263_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_5_fu_1263_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_2F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_28(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_28(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_2F(7-1 downto 0)));
            for temp_data_V_5_fu_1263_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_5_fu_1263_p4_i) := data_word_V(128-1-temp_data_V_5_fu_1263_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_5_fu_1263_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_6_fu_1252_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_6_fu_1252_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_37(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_30(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_30(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_37(7-1 downto 0)));
            for temp_data_V_6_fu_1252_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_6_fu_1252_p4_i) := data_word_V(128-1-temp_data_V_6_fu_1252_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_6_fu_1252_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_7_fu_1241_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_7_fu_1241_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_3F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_38(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_38(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_3F(7-1 downto 0)));
            for temp_data_V_7_fu_1241_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_7_fu_1241_p4_i) := data_word_V(128-1-temp_data_V_7_fu_1241_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_7_fu_1241_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_8_fu_1230_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_8_fu_1230_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_47(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_40(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_40(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_47(7-1 downto 0)));
            for temp_data_V_8_fu_1230_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_8_fu_1230_p4_i) := data_word_V(128-1-temp_data_V_8_fu_1230_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_8_fu_1230_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_9_fu_1219_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_9_fu_1219_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_4F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_48(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_48(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_4F(7-1 downto 0)));
            for temp_data_V_9_fu_1219_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_9_fu_1219_p4_i) := data_word_V(128-1-temp_data_V_9_fu_1219_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_9_fu_1219_p4 <= resvalue(8-1 downto 0);
    end process;

    
    temp_data_V_fu_1318_p4_proc : process(data_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable temp_data_V_fu_1318_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := data_word_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7(7-1 downto 0)));
            for temp_data_V_fu_1318_p4_i in 0 to 128-1 loop
                v0_cpy(temp_data_V_fu_1318_p4_i) := data_word_V(128-1-temp_data_V_fu_1318_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        temp_data_V_fu_1318_p4 <= resvalue(8-1 downto 0);
    end process;

    tmp_11_fu_985_p1 <= count_V(3 - 1 downto 0);
    tmp_14_fu_909_p2 <= std_logic_vector(signed(ap_const_lv14_3FFF) + signed(tmp_24_fu_905_p1));
    tmp_15_cast_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_fu_1070_p5),15));
    tmp_17_fu_1329_p2 <= "1" when (word_byte_V = ap_const_lv4_F) else "0";
    tmp_18_fu_1336_p2 <= std_logic_vector(unsigned(word_byte_V) + unsigned(ap_const_lv4_1));
    tmp_20_fu_1399_p2 <= std_logic_vector(unsigned(buffer_count_V) + unsigned(ap_const_lv14_1));
    tmp_21_fu_1423_p2 <= std_logic_vector(unsigned(buffer_count_V) + unsigned(ap_const_lv14_3FFF));
    tmp_22_fu_933_p1 <= count_V(3 - 1 downto 0);
    tmp_23_fu_887_p1 <= length_V(8 - 1 downto 0);
    tmp_24_fu_905_p1 <= length_V(14 - 1 downto 0);
    tmp_27_not_fu_1351_p0 <= (0=>data_in_V_V_TVALID, others=>'-');
    tmp_27_not_fu_1351_p2 <= (tmp_27_not_fu_1351_p0 xor ap_const_lv1_1);
    tmp_2_fu_819_p2 <= "1" when (count_V = ap_const_lv14_1) else "0";
    tmp_3_fu_995_p7 <= std_logic_vector(signed(ap_const_lv3_6) - signed(tmp_11_fu_985_p1));
    tmp_4_fu_943_p7 <= std_logic_vector(signed(ap_const_lv3_6) - signed(tmp_22_fu_933_p1));
    tmp_5_fu_1092_p2 <= std_logic_vector(unsigned(tmp_15_cast_fu_1088_p1) + unsigned(ap_const_lv15_1));
    tmp_6_fu_1029_p2 <= "1" when (p_Result_6_fu_1019_p4 = ap_const_lv4_6) else "0";
    tmp_8_fu_841_p2 <= std_logic_vector(unsigned(ID_num_V) + unsigned(ap_const_lv8_1));
    tmp_9_fu_1082_p2 <= "1" when (unsigned(p_Result_2_fu_1070_p5) < unsigned(ap_const_lv14_30)) else "0";
    tmp_nbreadreq_fu_307_p3 <= (0=>data_buffer_V_V_empty_n, others=>'-');
    tmp_s_fu_871_p2 <= "1" when (count_V = ap_const_lv14_2) else "0";
    tx_r_control_V <= ap_const_lv1_0;
    tx_r_data_V <= tx_data_V;
    tx_r_data_rdy_V <= data_ready_V;
    tx_r_eop_V <= eop_V;
    tx_r_err_V <= ap_const_lv1_0;
    tx_r_flushed_V <= ap_const_lv1_0;
    tx_r_rd_V_read_read_fu_288_p2 <= tx_r_rd_V;
    tx_r_sop_V <= sop_V;
    tx_r_underflow_V <= ap_const_lv1_0;
    tx_r_valid_V <= tx_valid_V;
    word_byte_V_load_load_fu_1145_p1 <= word_byte_V;
end behav;
