// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="compress,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=3.333333,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.505333,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=29,HLS_SYN_DSP=0,HLS_SYN_FF=1074,HLS_SYN_LUT=1577,HLS_VERSION=2018_2}" *)

module compress (
        in_V_V_TDATA,
        out_V_V_TDATA,
        ap_clk,
        ap_rst_n,
        in_V_V_TVALID,
        in_V_V_TREADY,
        out_V_V_TVALID,
        out_V_V_TREADY
);


input  [327:0] in_V_V_TDATA;
output  [127:0] out_V_V_TDATA;
input   ap_clk;
input   ap_rst_n;
input   in_V_V_TVALID;
output   in_V_V_TREADY;
output   out_V_V_TVALID;
input   out_V_V_TREADY;

 reg    ap_rst_n_inv;
wire    convert_inputs_U0_ap_start;
wire    convert_inputs_U0_ap_done;
wire    convert_inputs_U0_ap_continue;
wire    convert_inputs_U0_ap_idle;
wire    convert_inputs_U0_ap_ready;
wire    convert_inputs_U0_start_out;
wire    convert_inputs_U0_start_write;
wire    convert_inputs_U0_in_V_V_TREADY;
wire   [515:0] convert_inputs_U0_pack_buffer_V_V_din;
wire    convert_inputs_U0_pack_buffer_V_V_write;
wire    write_out_U0_ap_start;
wire    write_out_U0_ap_done;
wire    write_out_U0_ap_continue;
wire    write_out_U0_ap_idle;
wire    write_out_U0_ap_ready;
wire   [127:0] write_out_U0_out_V_V_TDATA;
wire    write_out_U0_out_V_V_TVALID;
wire    write_out_U0_pack_buffer_V_V_read;
wire    ap_sync_continue;
wire    pack_buffer_V_V_full_n;
wire   [515:0] pack_buffer_V_V_dout;
wire    pack_buffer_V_V_empty_n;
wire   [0:0] start_for_write_out_U0_din;
wire    start_for_write_out_U0_full_n;
wire   [0:0] start_for_write_out_U0_dout;
wire    start_for_write_out_U0_empty_n;
wire    write_out_U0_start_full_n;
wire    write_out_U0_start_write;

convert_inputs convert_inputs_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(convert_inputs_U0_ap_start),
    .start_full_n(start_for_write_out_U0_full_n),
    .ap_done(convert_inputs_U0_ap_done),
    .ap_continue(convert_inputs_U0_ap_continue),
    .ap_idle(convert_inputs_U0_ap_idle),
    .ap_ready(convert_inputs_U0_ap_ready),
    .start_out(convert_inputs_U0_start_out),
    .start_write(convert_inputs_U0_start_write),
    .in_V_V_TDATA(in_V_V_TDATA),
    .in_V_V_TVALID(in_V_V_TVALID),
    .in_V_V_TREADY(convert_inputs_U0_in_V_V_TREADY),
    .pack_buffer_V_V_din(convert_inputs_U0_pack_buffer_V_V_din),
    .pack_buffer_V_V_full_n(pack_buffer_V_V_full_n),
    .pack_buffer_V_V_write(convert_inputs_U0_pack_buffer_V_V_write)
);

write_out write_out_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(write_out_U0_ap_start),
    .ap_done(write_out_U0_ap_done),
    .ap_continue(write_out_U0_ap_continue),
    .ap_idle(write_out_U0_ap_idle),
    .ap_ready(write_out_U0_ap_ready),
    .out_V_V_TDATA(write_out_U0_out_V_V_TDATA),
    .out_V_V_TVALID(write_out_U0_out_V_V_TVALID),
    .out_V_V_TREADY(out_V_V_TREADY),
    .pack_buffer_V_V_dout(pack_buffer_V_V_dout),
    .pack_buffer_V_V_empty_n(pack_buffer_V_V_empty_n),
    .pack_buffer_V_V_read(write_out_U0_pack_buffer_V_V_read)
);

fifo_w516_d1024_A pack_buffer_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(convert_inputs_U0_pack_buffer_V_V_din),
    .if_full_n(pack_buffer_V_V_full_n),
    .if_write(convert_inputs_U0_pack_buffer_V_V_write),
    .if_dout(pack_buffer_V_V_dout),
    .if_empty_n(pack_buffer_V_V_empty_n),
    .if_read(write_out_U0_pack_buffer_V_V_read)
);

start_for_write_obkb start_for_write_obkb_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_write_out_U0_din),
    .if_full_n(start_for_write_out_U0_full_n),
    .if_write(convert_inputs_U0_start_write),
    .if_dout(start_for_write_out_U0_dout),
    .if_empty_n(start_for_write_out_U0_empty_n),
    .if_read(write_out_U0_ap_ready)
);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b0;

assign convert_inputs_U0_ap_continue = 1'b1;

assign convert_inputs_U0_ap_start = 1'b1;

assign in_V_V_TREADY = convert_inputs_U0_in_V_V_TREADY;

assign out_V_V_TDATA = write_out_U0_out_V_V_TDATA;

assign out_V_V_TVALID = write_out_U0_out_V_V_TVALID;

assign start_for_write_out_U0_din = 1'b1;

assign write_out_U0_ap_continue = 1'b1;

assign write_out_U0_ap_start = start_for_write_out_U0_empty_n;

assign write_out_U0_start_full_n = 1'b1;

assign write_out_U0_start_write = 1'b0;

endmodule //compress
