-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compress is
port (
    in_V_V_TDATA : IN STD_LOGIC_VECTOR (327 downto 0);
    out_V_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_V_V_TVALID : IN STD_LOGIC;
    in_V_V_TREADY : OUT STD_LOGIC;
    out_V_V_TVALID : OUT STD_LOGIC;
    out_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of compress is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "compress,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=3.333333,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.505333,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=29,HLS_SYN_DSP=0,HLS_SYN_FF=1074,HLS_SYN_LUT=1577,HLS_VERSION=2018_2}";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal convert_inputs_U0_ap_start : STD_LOGIC;
    signal convert_inputs_U0_ap_done : STD_LOGIC;
    signal convert_inputs_U0_ap_continue : STD_LOGIC;
    signal convert_inputs_U0_ap_idle : STD_LOGIC;
    signal convert_inputs_U0_ap_ready : STD_LOGIC;
    signal convert_inputs_U0_start_out : STD_LOGIC;
    signal convert_inputs_U0_start_write : STD_LOGIC;
    signal convert_inputs_U0_in_V_V_TREADY : STD_LOGIC;
    signal convert_inputs_U0_pack_buffer_V_V_din : STD_LOGIC_VECTOR (515 downto 0);
    signal convert_inputs_U0_pack_buffer_V_V_write : STD_LOGIC;
    signal write_out_U0_ap_start : STD_LOGIC;
    signal write_out_U0_ap_done : STD_LOGIC;
    signal write_out_U0_ap_continue : STD_LOGIC;
    signal write_out_U0_ap_idle : STD_LOGIC;
    signal write_out_U0_ap_ready : STD_LOGIC;
    signal write_out_U0_out_V_V_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal write_out_U0_out_V_V_TVALID : STD_LOGIC;
    signal write_out_U0_pack_buffer_V_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal pack_buffer_V_V_full_n : STD_LOGIC;
    signal pack_buffer_V_V_dout : STD_LOGIC_VECTOR (515 downto 0);
    signal pack_buffer_V_V_empty_n : STD_LOGIC;
    signal start_for_write_out_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_out_U0_full_n : STD_LOGIC;
    signal start_for_write_out_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_out_U0_empty_n : STD_LOGIC;
    signal write_out_U0_start_full_n : STD_LOGIC;
    signal write_out_U0_start_write : STD_LOGIC;

    component convert_inputs IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_V_V_TDATA : IN STD_LOGIC_VECTOR (327 downto 0);
        in_V_V_TVALID : IN STD_LOGIC;
        in_V_V_TREADY : OUT STD_LOGIC;
        pack_buffer_V_V_din : OUT STD_LOGIC_VECTOR (515 downto 0);
        pack_buffer_V_V_full_n : IN STD_LOGIC;
        pack_buffer_V_V_write : OUT STD_LOGIC );
    end component;


    component write_out IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_V_V_TVALID : OUT STD_LOGIC;
        out_V_V_TREADY : IN STD_LOGIC;
        pack_buffer_V_V_dout : IN STD_LOGIC_VECTOR (515 downto 0);
        pack_buffer_V_V_empty_n : IN STD_LOGIC;
        pack_buffer_V_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w516_d1024_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (515 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (515 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_write_obkb IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    convert_inputs_U0 : component convert_inputs
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => convert_inputs_U0_ap_start,
        start_full_n => start_for_write_out_U0_full_n,
        ap_done => convert_inputs_U0_ap_done,
        ap_continue => convert_inputs_U0_ap_continue,
        ap_idle => convert_inputs_U0_ap_idle,
        ap_ready => convert_inputs_U0_ap_ready,
        start_out => convert_inputs_U0_start_out,
        start_write => convert_inputs_U0_start_write,
        in_V_V_TDATA => in_V_V_TDATA,
        in_V_V_TVALID => in_V_V_TVALID,
        in_V_V_TREADY => convert_inputs_U0_in_V_V_TREADY,
        pack_buffer_V_V_din => convert_inputs_U0_pack_buffer_V_V_din,
        pack_buffer_V_V_full_n => pack_buffer_V_V_full_n,
        pack_buffer_V_V_write => convert_inputs_U0_pack_buffer_V_V_write);

    write_out_U0 : component write_out
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => write_out_U0_ap_start,
        ap_done => write_out_U0_ap_done,
        ap_continue => write_out_U0_ap_continue,
        ap_idle => write_out_U0_ap_idle,
        ap_ready => write_out_U0_ap_ready,
        out_V_V_TDATA => write_out_U0_out_V_V_TDATA,
        out_V_V_TVALID => write_out_U0_out_V_V_TVALID,
        out_V_V_TREADY => out_V_V_TREADY,
        pack_buffer_V_V_dout => pack_buffer_V_V_dout,
        pack_buffer_V_V_empty_n => pack_buffer_V_V_empty_n,
        pack_buffer_V_V_read => write_out_U0_pack_buffer_V_V_read);

    pack_buffer_V_V_U : component fifo_w516_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => convert_inputs_U0_pack_buffer_V_V_din,
        if_full_n => pack_buffer_V_V_full_n,
        if_write => convert_inputs_U0_pack_buffer_V_V_write,
        if_dout => pack_buffer_V_V_dout,
        if_empty_n => pack_buffer_V_V_empty_n,
        if_read => write_out_U0_pack_buffer_V_V_read);

    start_for_write_obkb_U : component start_for_write_obkb
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_write_out_U0_din,
        if_full_n => start_for_write_out_U0_full_n,
        if_write => convert_inputs_U0_start_write,
        if_dout => start_for_write_out_U0_dout,
        if_empty_n => start_for_write_out_U0_empty_n,
        if_read => write_out_U0_ap_ready);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    convert_inputs_U0_ap_continue <= ap_const_logic_1;
    convert_inputs_U0_ap_start <= ap_const_logic_1;
    in_V_V_TREADY <= convert_inputs_U0_in_V_V_TREADY;
    out_V_V_TDATA <= write_out_U0_out_V_V_TDATA;
    out_V_V_TVALID <= write_out_U0_out_V_V_TVALID;
    start_for_write_out_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_out_U0_ap_continue <= ap_const_logic_1;
    write_out_U0_ap_start <= start_for_write_out_U0_empty_n;
    write_out_U0_start_full_n <= ap_const_logic_1;
    write_out_U0_start_write <= ap_const_logic_0;
end behav;
