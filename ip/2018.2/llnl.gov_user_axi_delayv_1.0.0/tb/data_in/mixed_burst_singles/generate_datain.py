#-------------------------------------------------------------------------------
# Lawrence Livermore National Laboratory
# generate_datain.py
#-------------------------------------------------------------------------------

import os
import csv
import sys
from parse         import *
from axi_delay_pkg import *

#-------------------------------------------------------------------------------
# Global Constants
#-------------------------------------------------------------------------------
#crc           = "0000"  ## don't care field, will be replaced when packet is generated by FPGA
#swr           = "0"
#srd           = "1"
#nop           = "0"

#-------------------------------------------------------------------------------
# default output file names
#-------------------------------------------------------------------------------
op_dir               = ""        ## not used
opfile_name          = "axi_event.in"

#-------------------------------------------------------------------------------
# Check for existience of file; delete if it exists
#-------------------------------------------------------------------------------

if os.path.exists(opfile_name):
    os.remove(opfile_name)
      
#-------------------------------------------------------------------------------
# Send packet events:
# opfile_name, ipg(8), s_axi_id[15:0], s_axi_addr(39:0), s_axi_data[63:0], s_axi_strb[15:0], s_axi_len[7:0], 
#                      s_axi_size[2:0], s_axi_burst[1:0], s_axi_lock[1:0], s_axi_cache[3:0],
#                      s_axi_prot[2:0], s_axi_qos[3:0], s_axi_region[3:0], s_axi_valid, s_axi_last, s_axi_resp
#
# Some field definitions (along with the widths for THIS IMPLEMENTATION): 
#  s_axi_len[7:0]  = burst length, where "actual burst length" =  s_axi_len + 1
#  s_axi_size[2:0] = bytes per transfer, encoded as follows:
#                    0b000 = 1 byte
#                    0b001 = 2 bytes
#                    0b010 = 4 bytes
#                    0b011 = 8 bytes
#                    0b100 = 16 bytes
#                    0b101 = 32 bytes
#                    0b110 = 64 bytes
#                    0b111 = 128 bytes
#  s_axi_burst[1:0]   = 0b00 = FIXED
#                       0b01 = INCR
#                       0b10 = WRAP
#                       0b11 = Reserved
#  s_axi_lock[1:0]    = 0b00 = Normal Access
#                       0b01 = Exclusive Access
#                       0b10 = Locked Access
#                       0b11 = Reserved
#  s_axi_prot[2:0]    = [0] = 1: privileged access, 0: unprivileged access
#                       [1] = 1: non-secure access, 0: secure access
#                       [2] = 1: instruction access, 0: data access
# s_axi_addr[39:0] => Hex address. HOWEVER, when s_axi_addr = 0xFFFFFFFFFF, axi_master treats this as a dummy cycle for the purpose of delaying the first event
#-------------------------------------------------------------------------------
##                ieg  resp  id      addr          data                                strb    len   size   burst lock  cache   prot   qos     region  valid last
##parse(opfile_name, 50, 0b00, 0x0001, 0xFFFFFFFFFF, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0) ##Dummy cycle

parse(opfile_name,  2, 0b00, 0x0000, 0x0000000000, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0000, 0x0000000000, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0000, 0x0000000000, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name, 20, 0b00, 0x0000, 0x0000000000, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x0001, 0x0000000001, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0001, 0x0000000001, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0001, 0x0000000001, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name, 20, 0b00, 0x0001, 0x0000000001, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name, 20, 0b00, 0x0002, 0x0000000002, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name, 20, 0b00, 0x0002, 0x0000000002, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name, 20, 0b00, 0x0002, 0x0000000002, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name, 20, 0b00, 0x0002, 0x0000000002, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0003, 0x0000000003, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0003, 0x0000000003, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0003, 0x0000000003, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name, 10, 0b00, 0x0003, 0x0000000003, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0004, 0x0000000004, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0004, 0x0000000004, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0004, 0x0000000004, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  8, 0b00, 0x0004, 0x0000000004, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0005, 0x0000000005, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0005, 0x0000000005, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0005, 0x0000000005, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  6, 0b00, 0x0005, 0x0000000005, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0006, 0x0000000006, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0006, 0x0000000006, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0006, 0x0000000006, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name, 20, 0b00, 0x0006, 0x0000000006, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0007, 0x0000000007, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0007, 0x0000000007, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0007, 0x0000000007, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0007, 0x0000000007, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0008, 0x0000000008, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0008, 0x0000000008, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0008, 0x0000000008, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0008, 0x0000000008, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0009, 0x0000000009, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0009, 0x0000000009, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0009, 0x0000000009, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,100, 0b00, 0x0009, 0x0000000009, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x000A, 0x000000000A, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x000A, 0x000000000A, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x000A, 0x000000000A, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x000A, 0x000000000A, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x000B, 0x000000000B, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x000B, 0x000000000B, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x000B, 0x000000000B, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x000B, 0x000000000B, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x000C, 0x000000000C, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x000C, 0x000000000C, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x000C, 0x000000000C, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x000C, 0x000000000C, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x000D, 0x000000000D, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x000D, 0x000000000D, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x000D, 0x000000000D, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x000D, 0x000000000D, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x000E, 0x000000000E, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x000E, 0x000000000E, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x000E, 0x000000000E, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x000E, 0x000000000E, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x000F, 0x000000000F, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x000F, 0x000000000F, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x000F, 0x000000000F, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name, 50, 0b00, 0x000F, 0x000000000F, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0010, 0x0000000010, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0010, 0x0000000010, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0010, 0x0000000010, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0010, 0x0000000010, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0011, 0x0000000011, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0011, 0x0000000011, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0011, 0x0000000011, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0011, 0x0000000011, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0012, 0x0000000012, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0012, 0x0000000012, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0012, 0x0000000012, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0012, 0x0000000012, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0013, 0x0000000013, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0013, 0x0000000013, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0013, 0x0000000013, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0013, 0x0000000013, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0014, 0x0000000014, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0014, 0x0000000014, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0014, 0x0000000014, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0014, 0x0000000014, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0015, 0x0000000015, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0015, 0x0000000015, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0015, 0x0000000015, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0015, 0x0000000015, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0016, 0x0000000016, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0016, 0x0000000016, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0016, 0x0000000016, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0016, 0x0000000016, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0017, 0x0000000017, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0017, 0x0000000017, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0017, 0x0000000017, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0017, 0x0000000017, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0018, 0x0000000018, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0018, 0x0000000018, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0018, 0x0000000018, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0018, 0x0000000018, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0019, 0x0000000019, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0019, 0x0000000019, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0019, 0x0000000019, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0019, 0x0000000019, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x001A, 0x000000001A, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x001A, 0x000000001A, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x001A, 0x000000001A, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x001A, 0x000000001A, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x001B, 0x000000001B, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x001B, 0x000000001B, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x001B, 0x000000001B, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x001B, 0x000000001B, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x001C, 0x000000001C, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x001C, 0x000000001C, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x001C, 0x000000001C, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x001C, 0x000000001C, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x001D, 0x000000001D, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x001D, 0x000000001D, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x001D, 0x000000001D, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x001D, 0x000000001D, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x001E, 0x000000001E, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x001E, 0x000000001E, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x001E, 0x000000001E, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x001E, 0x000000001E, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x001F, 0x000000001F, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x001F, 0x000000001F, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x001F, 0x000000001F, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name, 50, 0b00, 0x001F, 0x000000001F, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x0020, 0x0000000020, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0020, 0x0000000020, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0020, 0x0000000020, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0020, 0x0000000020, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x0021, 0x0000000021, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0021, 0x0000000021, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0021, 0x0000000021, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0021, 0x0000000021, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x0022, 0x0000000022, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0022, 0x0000000022, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0022, 0x0000000022, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0022, 0x0000000022, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x0023, 0x0000000023, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0023, 0x0000000023, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0023, 0x0000000023, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0023, 0x0000000023, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x0024, 0x0000000024, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0024, 0x0000000024, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0024, 0x0000000024, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0024, 0x0000000024, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x0025, 0x0000000025, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0025, 0x0000000025, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0025, 0x0000000025, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0025, 0x0000000025, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x0026, 0x0000000026, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0026, 0x0000000026, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0026, 0x0000000026, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0026, 0x0000000026, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x0027, 0x0000000027, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0027, 0x0000000027, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0027, 0x0000000027, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0027, 0x0000000027, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x0028, 0x0000000028, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0028, 0x0000000028, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0028, 0x0000000028, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0028, 0x0000000028, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x0029, 0x0000000029, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0029, 0x0000000029, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0029, 0x0000000029, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x0029, 0x0000000029, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x002A, 0x000000002A, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002A, 0x000000002A, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002A, 0x000000002A, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002A, 0x000000002A, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x002B, 0x000000002B, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002B, 0x000000002B, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002B, 0x000000002B, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002B, 0x000000002B, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x002C, 0x000000002C, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002C, 0x000000002C, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002C, 0x000000002C, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002C, 0x000000002C, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x002D, 0x000000002D, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002D, 0x000000002D, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002D, 0x000000002D, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002D, 0x000000002D, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x002E, 0x000000002E, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002E, 0x000000002E, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002E, 0x000000002E, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002E, 0x000000002E, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  2, 0b00, 0x002F, 0x000000002F, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002F, 0x000000002F, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  2, 0b00, 0x002F, 0x000000002F, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name, 50, 0b00, 0x002F, 0x000000002F, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)


parse(opfile_name,  0, 0b00, 0x0030, 0x0000000030, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0031, 0x0000000031, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0031, 0x0000000031, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0031, 0x0000000031, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0031, 0x0000000031, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0032, 0x0000000032, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0033, 0x0000000033, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0033, 0x0000000033, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0033, 0x0000000033, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0033, 0x0000000033, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0034, 0x0000000034, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0035, 0x0000000035, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0035, 0x0000000035, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0035, 0x0000000035, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0035, 0x0000000035, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0036, 0x0000000036, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0037, 0x0000000037, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0037, 0x0000000037, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0037, 0x0000000037, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0037, 0x0000000037, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0038, 0x0000000038, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0039, 0x0000000039, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x003A, 0x000000003A, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x003A, 0x000000003A, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x003A, 0x000000003A, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x003A, 0x000000003A, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x003B, 0x000000003B, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x003C, 0x000000003C, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x003C, 0x000000003C, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x003C, 0x000000003C, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x003C, 0x000000003C, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x003D, 0x000000003D, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x003E, 0x000000003E, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x003E, 0x000000003E, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x003E, 0x000000003E, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x003E, 0x000000003E, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name, 50, 0b00, 0x003F, 0x000000003F, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0040, 0x0000000040, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0040, 0x0000000040, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0040, 0x0000000040, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0040, 0x0000000040, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0041, 0x0000000041, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0041, 0x0000000041, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0041, 0x0000000041, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0041, 0x0000000041, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0042, 0x0000000042, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0042, 0x0000000042, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0042, 0x0000000042, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0042, 0x0000000042, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0043, 0x0000000043, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0043, 0x0000000043, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0043, 0x0000000043, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0043, 0x0000000043, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0044, 0x0000000044, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0044, 0x0000000044, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0044, 0x0000000044, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0044, 0x0000000044, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0045, 0x0000000045, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0045, 0x0000000045, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0045, 0x0000000045, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0045, 0x0000000045, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0046, 0x0000000046, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0046, 0x0000000046, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0046, 0x0000000046, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0046, 0x0000000046, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0047, 0x0000000047, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0047, 0x0000000047, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0047, 0x0000000047, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0047, 0x0000000047, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0048, 0x0000000048, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0048, 0x0000000048, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0048, 0x0000000048, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0048, 0x0000000048, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x0049, 0x0000000049, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0049, 0x0000000049, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0049, 0x0000000049, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x0049, 0x0000000049, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x004A, 0x000000004A, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004A, 0x000000004A, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004A, 0x000000004A, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004A, 0x000000004A, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x004B, 0x000000004B, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004B, 0x000000004B, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004B, 0x000000004B, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004B, 0x000000004B, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x004C, 0x000000004C, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004C, 0x000000004C, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004C, 0x000000004C, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004C, 0x000000004C, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x004D, 0x000000004D, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004D, 0x000000004D, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004D, 0x000000004D, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004D, 0x000000004D, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x004E, 0x000000004E, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004E, 0x000000004E, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004E, 0x000000004E, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004E, 0x000000004E, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)

parse(opfile_name,  0, 0b00, 0x004F, 0x000000004F, 0x123456789abcdef0123456789abcdef0, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0001, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004F, 0x000000004F, 0xdeadbeefdeadbeefdeadbeefdeadbeef, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0010, 0b1,  0b0)
parse(opfile_name,  0, 0b00, 0x004F, 0x000000004F, 0xbaddf00dbaddf00dbaddf00dbaddf00d, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0011, 0b1,  0b0)
parse(opfile_name,999, 0b00, 0x004F, 0x000000004F, 0x11223344556677881122334455667788, 0xffff, 0x04, 0b110, 0b01, 0b00, 0b0010, 0b010, 0b0000, 0b0100, 0b1,  0b1)